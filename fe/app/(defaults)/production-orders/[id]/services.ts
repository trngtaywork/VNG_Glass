import axios from "@/setup/axios";

export interface ProductionOutputDto {
    productionOutputId: number;
    productId: number;
    productName: string;
    productCode: string;
    uom: string;
    amount: number;
    orderId: number;
    costObject: string;
}

export interface ProductionOrderDto {
    productionOrderCode: string;
    orderDate: string;
    description: string;
    productionStatus: string;
}

export interface MaterialDto {
    id: number;
    productionId: number;
    productionName: string;
    productionOutputId: number;
    uom: string;
    amount: number;
    costObject?: string;
    costItem?: string;
}

/**
 * L·∫•y th√¥ng tin ProductionOrder theo Id
 * @param productionOrderId - ID c·ªßa production order
 * @returns Promise<ProductionOrderDto> - Th√¥ng tin production order
 */
export const getProductionOrderById = async (productionOrderId: number): Promise<ProductionOrderDto> => {
    try {
        const response = await axios.get<ProductionOrderDto>(`/api/ProductionOrders/${productionOrderId}`);
        return response.data;
    } catch (error) {
        console.error('Error fetching production order:', error);
        throw new Error('Kh√¥ng th·ªÉ l·∫•y th√¥ng tin production order');
    }
};

/**
 * L·∫•y danh s√°ch ProductionOutput c·ªßa m·ªôt ProductionOrder
 * @param productionOrderId - ID c·ªßa production order
 * @returns Promise<ProductionOutputDto[]> - Danh s√°ch production outputs
 */
export const getProductionOutputs = async (productionOrderId: number): Promise<ProductionOutputDto[]> => {
    try {
        const response = await axios.get<ProductionOutputDto[]>(`/api/ProductionOrders/${productionOrderId}/production-outputs`);
        return response.data;
    } catch (error) {
        console.error('Error fetching production outputs:', error);
        throw new Error('Kh√¥ng th·ªÉ l·∫•y danh s√°ch production outputs');
    }
};

/**
 * L·∫•y danh s√°ch Materials theo ProductId v√† ProductOutputId
 * @param productId - ID c·ªßa product
 * @param productOutputId - ID c·ªßa product output
 * @returns Promise<MaterialDto[]> - Danh s√°ch materials
 */
export const getMaterialsByProductId = async (productId: number, productOutputId: number): Promise<MaterialDto[]> => {
    console.log('üåê API Call - URL:', `/api/Materials/by-product/${productId}?productOutputId=${productOutputId}`);
    console.log('üìã Parameters:', { productId, productOutputId });
    
    try {
        const response = await axios.get<MaterialDto[]>(`/api/Materials/by-product/${productId}?productOutputId=${productOutputId}`);
        console.log('üì° API Response status:', response.status);
        console.log('üìÑ Response data:', response.data);
        console.log('üìä Response data type:', typeof response.data);
        console.log('üì¶ Response data length:', Array.isArray(response.data) ? response.data.length : 'Not an array');
        return response.data;
    } catch (error) {
        console.error('üí• API Error:', error);
        console.error('üö® Error details:', {
            message: (error as any).message,
            status: (error as any).response?.status,
            statusText: (error as any).response?.statusText,
            data: (error as any).response?.data
        });
        throw new Error('Kh√¥ng th·ªÉ l·∫•y danh s√°ch materials');
    }
};

/**
 * Th√™m materials cho m·ªôt s·∫£n ph·∫©m
 * @param glassProductId - ID c·ªßa glass product
 * @param productionOutputId - ID c·ªßa production output
 * @returns Promise<any> - K·∫øt qu·∫£ th√™m materials
 */
export const addMaterialsForProduct = async (glassProductId: number, productionOutputId: number): Promise<any> => {
    try {
        const response = await axios.post(`/api/Materials/add-materials?glassProductId=${glassProductId}&productionOutputId=${productionOutputId}`);
        return response.data;
    } catch (error) {
        console.error('Error adding materials for product:', error);
        throw new Error('Kh√¥ng th·ªÉ th√™m materials cho s·∫£n ph·∫©m');
    }
}; 