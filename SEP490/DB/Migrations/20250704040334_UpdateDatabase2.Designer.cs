// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SEP490.DB;

#nullable disable

namespace SEP490.DB.Migrations
{
    [DbContext(typeof(SEP490DbContext))]
    [Migration("20250704040334_UpdateDatabase2")]
    partial class UpdateDatabase2
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("SEP490.DB.Models.Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int")
                        .HasColumnName("employee_id");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("password_hash");

                    b.Property<int>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("role_id");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("user_name");

                    b.HasKey("Id")
                        .HasName("pk_accounts");

                    b.HasIndex("EmployeeId")
                        .HasDatabaseName("ix_accounts_employee_id");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_accounts_role_id");

                    b.ToTable("accounts", (string)null);
                });

            modelBuilder.Entity("SEP490.DB.Models.ChemicalExportDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int>("ExportInvoiceId")
                        .HasColumnType("int")
                        .HasColumnName("export_invoice_id");

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("product_id");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(65,30)")
                        .HasColumnName("quantity");

                    b.Property<string>("UOM")
                        .HasColumnType("longtext")
                        .HasColumnName("uom");

                    b.HasKey("Id")
                        .HasName("pk_chemical_export_details");

                    b.HasIndex("ExportInvoiceId")
                        .HasDatabaseName("ix_chemical_export_details_export_invoice_id");

                    b.ToTable("chemical_export_details", (string)null);
                });

            modelBuilder.Entity("SEP490.DB.Models.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Address")
                        .HasColumnType("longtext")
                        .HasColumnName("address");

                    b.Property<string>("ContactPerson")
                        .HasColumnType("longtext")
                        .HasColumnName("contact_person");

                    b.Property<string>("CustomerCode")
                        .HasColumnType("longtext")
                        .HasColumnName("customer_code");

                    b.Property<string>("CustomerName")
                        .HasColumnType("longtext")
                        .HasColumnName("customer_name");

                    b.Property<decimal?>("Debt")
                        .HasColumnType("decimal(65,30)")
                        .HasColumnName("debt");

                    b.Property<decimal?>("Discount")
                        .HasColumnType("decimal(65,30)")
                        .HasColumnName("discount");

                    b.Property<bool>("IsSupplier")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_supplier");

                    b.Property<string>("Phone")
                        .HasColumnType("longtext")
                        .HasColumnName("phone");

                    b.Property<string>("TagName")
                        .HasColumnType("longtext")
                        .HasColumnName("tag_name");

                    b.Property<string>("TaxCode")
                        .HasColumnType("longtext")
                        .HasColumnName("tax_code");

                    b.Property<string>("ZaloId")
                        .HasColumnType("longtext")
                        .HasColumnName("zalo_id");

                    b.Property<string>("ZaloName")
                        .HasColumnType("longtext")
                        .HasColumnName("zalo_name");

                    b.HasKey("Id")
                        .HasName("pk_customers");

                    b.ToTable("customers", (string)null);
                });

            modelBuilder.Entity("SEP490.DB.Models.CutGlassInvoiceMaterial", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int>("ExportInvoiceId")
                        .HasColumnType("int")
                        .HasColumnName("export_invoice_id");

                    b.Property<string>("materialName")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("material_name");

                    b.Property<int>("materialType")
                        .HasColumnType("int")
                        .HasColumnName("material_type");

                    b.Property<int>("quantity")
                        .HasColumnType("int")
                        .HasColumnName("quantity");

                    b.HasKey("Id")
                        .HasName("pk_cut_glass_invoice_materials");

                    b.HasIndex("ExportInvoiceId")
                        .HasDatabaseName("ix_cut_glass_invoice_materials_export_invoice_id");

                    b.ToTable("cut_glass_invoice_materials", (string)null);
                });

            modelBuilder.Entity("SEP490.DB.Models.CutGlassInvoiceOutput", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int>("CutGlassInvoiceMaterialId")
                        .HasColumnType("int")
                        .HasColumnName("cut_glass_invoice_material_id");

                    b.Property<bool>("IsDC")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_dc");

                    b.Property<string>("OutputName")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("output_name");

                    b.Property<int>("OutputType")
                        .HasColumnType("int")
                        .HasColumnName("output_type");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("quantity");

                    b.HasKey("Id")
                        .HasName("pk_cut_glass_invoice_outputs");

                    b.HasIndex("CutGlassInvoiceMaterialId")
                        .HasDatabaseName("ix_cut_glass_invoice_outputs_cut_glass_invoice_material_id");

                    b.ToTable("cut_glass_invoice_outputs", (string)null);
                });

            modelBuilder.Entity("SEP490.DB.Models.DeliveryHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<DateTime>("DeliveryDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("delivery_date");

                    b.Property<string>("Note")
                        .HasColumnType("longtext")
                        .HasColumnName("note");

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("product_id");

                    b.Property<int>("ProductionPlanId")
                        .HasColumnType("int")
                        .HasColumnName("production_plan_id");

                    b.Property<int>("QuantityDelivery")
                        .HasColumnType("int")
                        .HasColumnName("quantity_delivery");

                    b.HasKey("Id")
                        .HasName("pk_delivery_histories");

                    b.HasIndex("ProductId")
                        .HasDatabaseName("ix_delivery_histories_product_id");

                    b.HasIndex("ProductionPlanId")
                        .HasDatabaseName("ix_delivery_histories_production_plan_id");

                    b.ToTable("delivery_histories", (string)null);
                });

            modelBuilder.Entity("SEP490.DB.Models.DeliveryHistoryDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<DateTime>("DeliveryDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("delivery_date");

                    b.Property<int>("DeliveryHistoryId")
                        .HasColumnType("int")
                        .HasColumnName("delivery_history_id");

                    b.Property<int>("QuantityDelivered")
                        .HasColumnType("int")
                        .HasColumnName("quantity_delivered");

                    b.HasKey("Id")
                        .HasName("pk_delivery_history_details");

                    b.HasIndex("DeliveryHistoryId")
                        .HasDatabaseName("ix_delivery_history_details_delivery_history_id");

                    b.ToTable("delivery_history_details", (string)null);
                });

            modelBuilder.Entity("SEP490.DB.Models.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Address")
                        .HasColumnType("longtext")
                        .HasColumnName("address");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int")
                        .HasColumnName("department_id");

                    b.Property<string>("Email")
                        .HasColumnType("longtext")
                        .HasColumnName("email");

                    b.Property<string>("EmployeeCode")
                        .HasColumnType("longtext")
                        .HasColumnName("employee_code");

                    b.Property<string>("FullName")
                        .HasColumnType("longtext")
                        .HasColumnName("full_name");

                    b.Property<string>("Phone")
                        .HasColumnType("longtext")
                        .HasColumnName("phone");

                    b.HasKey("Id")
                        .HasName("pk_employees");

                    b.ToTable("employees", (string)null);
                });

            modelBuilder.Entity("SEP490.DB.Models.ExportInvoice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("int")
                        .HasColumnName("employee_id");

                    b.Property<string>("EmployeeName")
                        .HasColumnType("longtext")
                        .HasColumnName("employee_name");

                    b.Property<string>("ExportDate")
                        .HasColumnType("longtext")
                        .HasColumnName("export_date");

                    b.Property<string>("Note")
                        .HasColumnType("longtext")
                        .HasColumnName("note");

                    b.Property<int>("ProductionOrderId")
                        .HasColumnType("int")
                        .HasColumnName("production_order_id");

                    b.Property<int?>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.Property<int?>("TotalAmount")
                        .HasColumnType("int")
                        .HasColumnName("total_amount");

                    b.HasKey("Id")
                        .HasName("pk_export_invoices");

                    b.HasIndex("ProductionOrderId")
                        .HasDatabaseName("ix_export_invoices_production_order_id");

                    b.ToTable("export_invoices", (string)null);
                });

            modelBuilder.Entity("SEP490.DB.Models.GlassStructure", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int?>("AdhesiveLayers")
                        .HasColumnType("int")
                        .HasColumnName("adhesive_layers");

                    b.Property<decimal?>("AdhesiveThickness")
                        .HasColumnType("decimal(65,30)")
                        .HasColumnName("adhesive_thickness");

                    b.Property<string>("AdhesiveType")
                        .HasColumnType("longtext")
                        .HasColumnName("adhesive_type");

                    b.Property<string>("Category")
                        .HasColumnType("longtext")
                        .HasColumnName("category");

                    b.Property<string>("Composition")
                        .HasColumnType("longtext")
                        .HasColumnName("composition");

                    b.Property<string>("EdgeType")
                        .HasColumnType("longtext")
                        .HasColumnName("edge_type");

                    b.Property<int?>("GlassLayers")
                        .HasColumnType("int")
                        .HasColumnName("glass_layers");

                    b.Property<string>("ProductCode")
                        .HasColumnType("longtext")
                        .HasColumnName("product_code");

                    b.Property<string>("ProductName")
                        .HasColumnType("longtext")
                        .HasColumnName("product_name");

                    b.Property<int?>("UnitPrice")
                        .HasColumnType("int")
                        .HasColumnName("unit_price");

                    b.HasKey("Id")
                        .HasName("pk_glass_structures");

                    b.ToTable("glass_structures", (string)null);
                });

            modelBuilder.Entity("SEP490.DB.Models.GlueButylExportInvoice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.HasKey("Id")
                        .HasName("pk_glue_butyl_export_invoices");

                    b.ToTable("glue_butyl_export_invoices", (string)null);
                });

            modelBuilder.Entity("SEP490.DB.Models.HistoryMessage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Content")
                        .HasColumnType("longtext")
                        .HasColumnName("content");

                    b.Property<string>("ConversationId")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("conversation_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<string>("MediaUrl")
                        .HasColumnType("longtext")
                        .HasColumnName("media_url");

                    b.Property<string>("MessageType")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("message_type");

                    b.Property<int?>("OrderId")
                        .HasColumnType("int")
                        .HasColumnName("order_id");

                    b.Property<bool>("Processed")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("processed");

                    b.Property<string>("RawData")
                        .HasColumnType("longtext")
                        .HasColumnName("raw_data");

                    b.Property<DateTime?>("ReceivedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("received_time");

                    b.Property<DateTime>("SendTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("send_time");

                    b.Property<string>("SenderId")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("sender_id");

                    b.Property<string>("SenderType")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("sender_type");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_history_messages");

                    b.ToTable("history_messages", (string)null);
                });

            modelBuilder.Entity("SEP490.DB.Models.OrderDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("OrderCode")
                        .HasColumnType("longtext")
                        .HasColumnName("order_code");

                    b.Property<int>("SaleOrderId")
                        .HasColumnType("int")
                        .HasColumnName("sale_order_id");

                    b.Property<decimal?>("TotalAmount")
                        .HasColumnType("decimal(65,30)")
                        .HasColumnName("total_amount");

                    b.HasKey("Id")
                        .HasName("pk_order_details");

                    b.HasIndex("SaleOrderId")
                        .HasDatabaseName("ix_order_details_sale_order_id");

                    b.ToTable("order_details", (string)null);
                });

            modelBuilder.Entity("SEP490.DB.Models.OrderDetailProduct", b =>
                {
                    b.Property<int>("OrderDetailId")
                        .HasColumnType("int")
                        .HasColumnName("order_detail_id");

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("product_id");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("quantity");

                    b.Property<decimal?>("TotalAmount")
                        .HasColumnType("decimal(65,30)")
                        .HasColumnName("total_amount");

                    b.HasKey("OrderDetailId", "ProductId")
                        .HasName("pk_order_detail_products");

                    b.HasIndex("ProductId")
                        .HasDatabaseName("ix_order_detail_products_product_id");

                    b.ToTable("order_detail_products", (string)null);
                });

            modelBuilder.Entity("SEP490.DB.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int?>("GlassStructureId")
                        .HasColumnType("int")
                        .HasColumnName("glass_structure_id");

                    b.Property<string>("Height")
                        .HasColumnType("longtext")
                        .HasColumnName("height");

                    b.Property<string>("ProductCode")
                        .HasColumnType("longtext")
                        .HasColumnName("product_code");

                    b.Property<string>("ProductName")
                        .HasColumnType("longtext")
                        .HasColumnName("product_name");

                    b.Property<string>("ProductType")
                        .HasColumnType("longtext")
                        .HasColumnName("product_type");

                    b.Property<decimal?>("Thickness")
                        .HasColumnType("decimal(65,30)")
                        .HasColumnName("thickness");

                    b.Property<string>("UOM")
                        .HasColumnType("longtext")
                        .HasColumnName("uom");

                    b.Property<decimal?>("UnitPrice")
                        .HasColumnType("decimal(65,30)")
                        .HasColumnName("unit_price");

                    b.Property<decimal?>("Weight")
                        .HasColumnType("decimal(65,30)")
                        .HasColumnName("weight");

                    b.Property<string>("Width")
                        .HasColumnType("longtext")
                        .HasColumnName("width");

                    b.HasKey("Id")
                        .HasName("pk_products");

                    b.HasIndex("GlassStructureId")
                        .HasDatabaseName("ix_products_glass_structure_id");

                    b.ToTable("products", (string)null);
                });

            modelBuilder.Entity("SEP490.DB.Models.ProductionMaterial", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<decimal?>("Amount")
                        .HasColumnType("decimal(65,30)")
                        .HasColumnName("amount");

                    b.Property<string>("CostItem")
                        .HasColumnType("longtext")
                        .HasColumnName("cost_item");

                    b.Property<string>("CostObject")
                        .HasColumnType("longtext")
                        .HasColumnName("cost_object");

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("product_id");

                    b.Property<int>("ProductionId")
                        .HasColumnType("int")
                        .HasColumnName("production_id");

                    b.Property<string>("ProductionName")
                        .HasColumnType("longtext")
                        .HasColumnName("production_name");

                    b.Property<int>("ProductionOutputId")
                        .HasColumnType("int")
                        .HasColumnName("production_output_id");

                    b.Property<string>("UOM")
                        .HasColumnType("longtext")
                        .HasColumnName("uom");

                    b.HasKey("Id")
                        .HasName("pk_production_materials");

                    b.HasIndex("ProductId")
                        .HasDatabaseName("ix_production_materials_product_id");

                    b.HasIndex("ProductionOutputId")
                        .HasDatabaseName("ix_production_materials_production_output_id");

                    b.ToTable("production_materials", (string)null);
                });

            modelBuilder.Entity("SEP490.DB.Models.ProductionOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .HasColumnType("longtext")
                        .HasColumnName("description");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("order_date");

                    b.Property<string>("ProductionOrderCode")
                        .HasColumnType("longtext")
                        .HasColumnName("production_order_code");

                    b.Property<string>("ProductionPlanCode")
                        .HasColumnType("longtext")
                        .HasColumnName("production_plan_code");

                    b.Property<int>("ProductionPlanId")
                        .HasColumnType("int")
                        .HasColumnName("production_plan_id");

                    b.Property<string>("ProductionStatus")
                        .HasColumnType("longtext")
                        .HasColumnName("production_status");

                    b.Property<bool>("StatusDaLapDuPhieuNhap")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("status_da_lap_du_phieu_nhap");

                    b.Property<bool>("StatusDaLapDuPhieuXuat")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("status_da_lap_du_phieu_xuat");

                    b.Property<bool>("StatusDaNhapKhoTP")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("status_da_nhap_kho_tp");

                    b.Property<bool>("StatusDaNhapMisa")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("status_da_nhap_misa");

                    b.Property<bool>("StatusDaXuatKhoNVL")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("status_da_xuat_kho_nvl");

                    b.Property<string>("Type")
                        .HasColumnType("longtext")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("pk_production_orders");

                    b.HasIndex("ProductionPlanId")
                        .HasDatabaseName("ix_production_orders_production_plan_id");

                    b.ToTable("production_orders", (string)null);
                });

            modelBuilder.Entity("SEP490.DB.Models.ProductionOrderDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("product_id");

                    b.Property<int?>("ProductionOrderId")
                        .HasColumnType("int")
                        .HasColumnName("production_order_id");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("quantity");

                    b.Property<string>("TrangThai")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("trang_thai");

                    b.Property<string>("TrangThaiCatKinh")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("trang_thai_cat_kinh");

                    b.Property<string>("TrangThaiXuatKeo")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("trang_thai_xuat_keo");

                    b.HasKey("Id")
                        .HasName("pk_production_order_details");

                    b.HasIndex("ProductId")
                        .HasDatabaseName("ix_production_order_details_product_id");

                    b.HasIndex("ProductionOrderId")
                        .HasDatabaseName("ix_production_order_details_production_order_id");

                    b.ToTable("production_order_details", (string)null);
                });

            modelBuilder.Entity("SEP490.DB.Models.ProductionOutput", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<decimal?>("Amount")
                        .HasColumnType("decimal(65,30)")
                        .HasColumnName("amount");

                    b.Property<string>("CostObject")
                        .HasColumnType("longtext")
                        .HasColumnName("cost_object");

                    b.Property<int>("OrderId")
                        .HasColumnType("int")
                        .HasColumnName("order_id");

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("product_id");

                    b.Property<string>("ProductName")
                        .HasColumnType("longtext")
                        .HasColumnName("product_name");

                    b.Property<int>("ProductionOrderId")
                        .HasColumnType("int")
                        .HasColumnName("production_order_id");

                    b.Property<string>("UOM")
                        .HasColumnType("longtext")
                        .HasColumnName("uom");

                    b.HasKey("Id")
                        .HasName("pk_production_outputs");

                    b.HasIndex("ProductId")
                        .HasDatabaseName("ix_production_outputs_product_id");

                    b.HasIndex("ProductionOrderId")
                        .HasDatabaseName("ix_production_outputs_production_order_id");

                    b.ToTable("production_outputs", (string)null);
                });

            modelBuilder.Entity("SEP490.DB.Models.ProductionPlan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("CustomerCode")
                        .HasColumnType("longtext")
                        .HasColumnName("customer_code");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("customer_id");

                    b.Property<DateTime>("PlanDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("plan_date");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("quantity");

                    b.Property<int>("SaleOrderId")
                        .HasColumnType("int")
                        .HasColumnName("sale_order_id");

                    b.Property<string>("Status")
                        .HasColumnType("longtext")
                        .HasColumnName("status");

                    b.HasKey("Id")
                        .HasName("pk_production_plans");

                    b.HasIndex("CustomerId")
                        .HasDatabaseName("ix_production_plans_customer_id");

                    b.HasIndex("SaleOrderId")
                        .HasDatabaseName("ix_production_plans_sale_order_id");

                    b.ToTable("production_plans", (string)null);
                });

            modelBuilder.Entity("SEP490.DB.Models.ProductionPlanDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int?>("DaCatKinh")
                        .HasColumnType("int")
                        .HasColumnName("da_cat_kinh");

                    b.Property<int?>("DaGiao")
                        .HasColumnType("int")
                        .HasColumnName("da_giao");

                    b.Property<int?>("DaTronKeo")
                        .HasColumnType("int")
                        .HasColumnName("da_tron_keo");

                    b.Property<int>("Done")
                        .HasColumnType("int")
                        .HasColumnName("done");

                    b.Property<int?>("Producing")
                        .HasColumnType("int")
                        .HasColumnName("producing");

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("product_id");

                    b.Property<int>("ProductionPlanId")
                        .HasColumnType("int")
                        .HasColumnName("production_plan_id");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("quantity");

                    b.HasKey("Id")
                        .HasName("pk_production_plan_details");

                    b.HasIndex("ProductId")
                        .HasDatabaseName("ix_production_plan_details_product_id");

                    b.HasIndex("ProductionPlanId")
                        .HasDatabaseName("ix_production_plan_details_production_plan_id");

                    b.ToTable("production_plan_details", (string)null);
                });

            modelBuilder.Entity("SEP490.DB.Models.PurchaseOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("code");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("date");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("description");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int")
                        .HasColumnName("employee_id");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("status");

                    b.Property<int>("SupplierId")
                        .HasColumnType("int")
                        .HasColumnName("supplier_id");

                    b.Property<decimal>("TotalValue")
                        .HasColumnType("decimal(65,30)")
                        .HasColumnName("total_value");

                    b.HasKey("Id")
                        .HasName("pk_purchase_orders");

                    b.HasIndex("EmployeeId")
                        .HasDatabaseName("ix_purchase_orders_employee_id");

                    b.HasIndex("SupplierId")
                        .HasDatabaseName("ix_purchase_orders_supplier_id");

                    b.ToTable("purchase_orders", (string)null);
                });

            modelBuilder.Entity("SEP490.DB.Models.PurchaseOrderDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("product_name");

                    b.Property<int>("PurchaseOrderId")
                        .HasColumnType("int")
                        .HasColumnName("purchase_order_id");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("quantity");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(65,30)")
                        .HasColumnName("total_price");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("unit");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(65,30)")
                        .HasColumnName("unit_price");

                    b.HasKey("Id")
                        .HasName("pk_purchase_order_details");

                    b.HasIndex("PurchaseOrderId")
                        .HasDatabaseName("ix_purchase_order_details_purchase_order_id");

                    b.ToTable("purchase_order_details", (string)null);
                });

            modelBuilder.Entity("SEP490.DB.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("role_name");

                    b.HasKey("Id")
                        .HasName("pk_roles");

                    b.ToTable("roles", (string)null);
                });

            modelBuilder.Entity("SEP490.DB.Models.SaleOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("CustomerCode")
                        .HasColumnType("longtext")
                        .HasColumnName("customer_code");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("customer_id");

                    b.Property<string>("DeliveryStatus")
                        .HasColumnType("longtext")
                        .HasColumnName("delivery_status");

                    b.Property<string>("Note")
                        .HasColumnType("longtext")
                        .HasColumnName("note");

                    b.Property<string>("OrderCode")
                        .HasColumnType("longtext")
                        .HasColumnName("order_code");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("order_date");

                    b.Property<decimal?>("OrderValue")
                        .HasColumnType("decimal(65,30)")
                        .HasColumnName("order_value");

                    b.Property<string>("Status")
                        .HasColumnType("longtext")
                        .HasColumnName("status");

                    b.HasKey("Id")
                        .HasName("pk_sale_orders");

                    b.HasIndex("CustomerId")
                        .HasDatabaseName("ix_sale_orders_customer_id");

                    b.ToTable("sale_orders", (string)null);
                });

            modelBuilder.Entity("SEP490.DB.Models.TestTable", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("create_at");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_test_table");

                    b.ToTable("test_table", (string)null);
                });

            modelBuilder.Entity("SEP490.DB.Models.ZaloToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("AccessToken")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("access_token");

                    b.Property<DateTime>("AccessTokenExpiresAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("access_token_expires_at");

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("refresh_token");

                    b.Property<DateTime>("RefreshTokenExpiresAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("refresh_token_expires_at");

                    b.HasKey("Id")
                        .HasName("pk_zalo_tokens");

                    b.ToTable("zalo_tokens", (string)null);
                });

            modelBuilder.Entity("SEP490.DB.Models.Account", b =>
                {
                    b.HasOne("SEP490.DB.Models.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_accounts_employees_employee_id");

                    b.HasOne("SEP490.DB.Models.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_accounts_roles_role_id");

                    b.Navigation("Employee");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("SEP490.DB.Models.ChemicalExportDetail", b =>
                {
                    b.HasOne("SEP490.DB.Models.ExportInvoice", "ExportInvoice")
                        .WithMany()
                        .HasForeignKey("ExportInvoiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_chemical_export_details_export_invoices_export_invoice_id");

                    b.Navigation("ExportInvoice");
                });

            modelBuilder.Entity("SEP490.DB.Models.CutGlassInvoiceMaterial", b =>
                {
                    b.HasOne("SEP490.DB.Models.ExportInvoice", "ExportInvoice")
                        .WithMany()
                        .HasForeignKey("ExportInvoiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_cut_glass_invoice_materials_export_invoices_export_invoice_id");

                    b.Navigation("ExportInvoice");
                });

            modelBuilder.Entity("SEP490.DB.Models.CutGlassInvoiceOutput", b =>
                {
                    b.HasOne("SEP490.DB.Models.CutGlassInvoiceMaterial", "CutGlassInvoiceMaterial")
                        .WithMany()
                        .HasForeignKey("CutGlassInvoiceMaterialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_cut_glass_invoice_outputs_cut_glass_invoice_materials_cut_gl");

                    b.Navigation("CutGlassInvoiceMaterial");
                });

            modelBuilder.Entity("SEP490.DB.Models.DeliveryHistory", b =>
                {
                    b.HasOne("SEP490.DB.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_delivery_histories_products_product_id");

                    b.HasOne("SEP490.DB.Models.ProductionPlan", "ProductionPlan")
                        .WithMany()
                        .HasForeignKey("ProductionPlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_delivery_histories_production_plans_production_plan_id");

                    b.Navigation("Product");

                    b.Navigation("ProductionPlan");
                });

            modelBuilder.Entity("SEP490.DB.Models.DeliveryHistoryDetail", b =>
                {
                    b.HasOne("SEP490.DB.Models.DeliveryHistory", "DeliveryHistory")
                        .WithMany("DeliveryDetails")
                        .HasForeignKey("DeliveryHistoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_delivery_history_details_delivery_histories_delivery_history");

                    b.Navigation("DeliveryHistory");
                });

            modelBuilder.Entity("SEP490.DB.Models.ExportInvoice", b =>
                {
                    b.HasOne("SEP490.DB.Models.ProductionOrder", "ProductionOrder")
                        .WithMany()
                        .HasForeignKey("ProductionOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_export_invoices_production_orders_production_order_id");

                    b.Navigation("ProductionOrder");
                });

            modelBuilder.Entity("SEP490.DB.Models.OrderDetail", b =>
                {
                    b.HasOne("SEP490.DB.Models.SaleOrder", "SaleOrder")
                        .WithMany("OrderDetails")
                        .HasForeignKey("SaleOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_order_details_sale_orders_sale_order_id");

                    b.Navigation("SaleOrder");
                });

            modelBuilder.Entity("SEP490.DB.Models.OrderDetailProduct", b =>
                {
                    b.HasOne("SEP490.DB.Models.OrderDetail", "OrderDetail")
                        .WithMany("OrderDetailProducts")
                        .HasForeignKey("OrderDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_order_detail_products_order_details_order_detail_id");

                    b.HasOne("SEP490.DB.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_order_detail_products_products_product_id");

                    b.Navigation("OrderDetail");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("SEP490.DB.Models.Product", b =>
                {
                    b.HasOne("SEP490.DB.Models.GlassStructure", "GlassStructure")
                        .WithMany()
                        .HasForeignKey("GlassStructureId")
                        .HasConstraintName("fk_products_glass_structures_glass_structure_id");

                    b.Navigation("GlassStructure");
                });

            modelBuilder.Entity("SEP490.DB.Models.ProductionMaterial", b =>
                {
                    b.HasOne("SEP490.DB.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_production_materials_products_product_id");

                    b.HasOne("SEP490.DB.Models.ProductionOutput", "ProductionOutput")
                        .WithMany()
                        .HasForeignKey("ProductionOutputId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_production_materials_production_outputs_production_output_id");

                    b.Navigation("Product");

                    b.Navigation("ProductionOutput");
                });

            modelBuilder.Entity("SEP490.DB.Models.ProductionOrder", b =>
                {
                    b.HasOne("SEP490.DB.Models.ProductionPlan", "ProductionPlan")
                        .WithMany()
                        .HasForeignKey("ProductionPlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_production_orders_production_plans_production_plan_id");

                    b.Navigation("ProductionPlan");
                });

            modelBuilder.Entity("SEP490.DB.Models.ProductionOrderDetail", b =>
                {
                    b.HasOne("SEP490.DB.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_production_order_details_products_product_id");

                    b.HasOne("SEP490.DB.Models.ProductionOrder", "ProductionOrder")
                        .WithMany()
                        .HasForeignKey("ProductionOrderId")
                        .HasConstraintName("fk_production_order_details_production_orders_production_order_id");

                    b.Navigation("Product");

                    b.Navigation("ProductionOrder");
                });

            modelBuilder.Entity("SEP490.DB.Models.ProductionOutput", b =>
                {
                    b.HasOne("SEP490.DB.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_production_outputs_products_product_id");

                    b.HasOne("SEP490.DB.Models.ProductionOrder", "ProductionOrder")
                        .WithMany()
                        .HasForeignKey("ProductionOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_production_outputs_production_orders_production_order_id");

                    b.Navigation("Product");

                    b.Navigation("ProductionOrder");
                });

            modelBuilder.Entity("SEP490.DB.Models.ProductionPlan", b =>
                {
                    b.HasOne("SEP490.DB.Models.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_production_plans_customers_customer_id");

                    b.HasOne("SEP490.DB.Models.SaleOrder", "SaleOrder")
                        .WithMany()
                        .HasForeignKey("SaleOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_production_plans_sale_orders_sale_order_id");

                    b.Navigation("Customer");

                    b.Navigation("SaleOrder");
                });

            modelBuilder.Entity("SEP490.DB.Models.ProductionPlanDetail", b =>
                {
                    b.HasOne("SEP490.DB.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_production_plan_details_products_product_id");

                    b.HasOne("SEP490.DB.Models.ProductionPlan", "ProductionPlan")
                        .WithMany("ProductionPlanDetails")
                        .HasForeignKey("ProductionPlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_production_plan_details_production_plans_production_plan_id");

                    b.Navigation("Product");

                    b.Navigation("ProductionPlan");
                });

            modelBuilder.Entity("SEP490.DB.Models.PurchaseOrder", b =>
                {
                    b.HasOne("SEP490.DB.Models.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_purchase_orders_employees_employee_id");

                    b.HasOne("SEP490.DB.Models.Customer", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_purchase_orders_customers_supplier_id");

                    b.Navigation("Employee");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("SEP490.DB.Models.PurchaseOrderDetail", b =>
                {
                    b.HasOne("SEP490.DB.Models.PurchaseOrder", "PurchaseOrder")
                        .WithMany()
                        .HasForeignKey("PurchaseOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_purchase_order_details_purchase_orders_purchase_order_id");

                    b.Navigation("PurchaseOrder");
                });

            modelBuilder.Entity("SEP490.DB.Models.SaleOrder", b =>
                {
                    b.HasOne("SEP490.DB.Models.Customer", "Customer")
                        .WithMany("SaleOrders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_sale_orders_customers_customer_id");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("SEP490.DB.Models.Customer", b =>
                {
                    b.Navigation("SaleOrders");
                });

            modelBuilder.Entity("SEP490.DB.Models.DeliveryHistory", b =>
                {
                    b.Navigation("DeliveryDetails");
                });

            modelBuilder.Entity("SEP490.DB.Models.OrderDetail", b =>
                {
                    b.Navigation("OrderDetailProducts");
                });

            modelBuilder.Entity("SEP490.DB.Models.ProductionPlan", b =>
                {
                    b.Navigation("ProductionPlanDetails");
                });

            modelBuilder.Entity("SEP490.DB.Models.SaleOrder", b =>
                {
                    b.Navigation("OrderDetails");
                });
#pragma warning restore 612, 618
        }
    }
}
